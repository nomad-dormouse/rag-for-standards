#!/usr/bin/env python3
"""
Simple localisation module for Ukrainian technical standards RAG system.
Supports Ukrainian (uk) and English (en) languages.
"""

import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Translation dictionary for UI and prompts
TRANSLATIONS = {
    'en': {
        # Webapp interface
        'app_title': 'üîç Search through Ukrainian technical standards using AI',
        'query_input_label': 'Enter your question',
        'query_input_placeholder': 'Enter your question here. For example: "What are the ergonomic requirements for workplace design?"',
        'search_button': 'üîç Search',
        'rag_response_header': 'üìë Response WITH access to standards',
        'direct_response_header': 'üí≠ Response WITHOUT access to standards',
        'no_query_message': 'Please enter a question to search',
        'processing_message': 'Processing your query...',
        'tips_header': '‚ùì How to use',
        'tips_text': '- Choose language using buttons above: üá¨üáß English or üá∫üá¶ Ukrainian\n- Ask a questions in chosen language about Ukrainian technical standards and press Enter or click üîé Search button\n- Get two different answers: on the left ‚Äî üìë with access to those standards, and on the right ‚Äî üí≠ without access to them',
        # Prompt templates
        'system_prompt': 'You are a helpful assistant who answers questions about Ukrainian standards for technical documentation. You should respond in English.',
        'translation_prompt': 'Translate the question from English to Ukrainian, formulate the answer in Ukrainian using context provided below, and then translate your answer to English. Provide only the answer in English.',
        'context_prompt': 'Given the following information:',
        'question_prompt': 'Question:',
        'answer_prompt': 'Answer:',
    },
    
    'uk': {
        # Webapp interface
        'app_title': 'üîç –ü–æ—à—É–∫ –ø–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü',
        'query_input_label': '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è',
        'query_input_placeholder': '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç—É—Ç. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–Ø–∫—ñ –µ—Ä–≥–æ–Ω–æ–º—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—á–æ–≥–æ –º—ñ—Å—Ü—è?"',
        'search_button': 'üîç –ü–æ—à—É–∫',
        'rag_response_header': 'üìë –í—ñ–¥–ø–æ–≤—ñ–¥—å –ó –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤',
        'direct_response_header': 'üí≠ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ë–ï–ó –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤',
        'no_query_message': '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É',
        'processing_message': '–û–±—Ä–æ–±–∫–∞ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É...',
        'tips_header': '‚ùì –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è',
        'tips_text': '- –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –≤–∏—â–µ: üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫—É –∞–±–æ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É\n- –ü–æ—Å—Ç–∞–≤—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –≤–∏–±—Ä–∞–Ω—ñ–π –º–æ–≤—ñ –ø—Ä–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –∞–±–æ –∫–Ω–æ–ø–∫—É üîé –ü–æ—à—É–∫\n- –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–≤—ñ —Ä—ñ–∑–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: –ª—ñ–≤–æ—Ä—É—á ‚Äî üìë –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ü–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤, –∞ –ø—Ä–∞–≤–æ—Ä—É—á ‚Äî üí≠ –±–µ–∑ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∏—Ö',
        # Prompt templates
        'system_prompt': '–¢–∏ ‚Äî –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.',
        'translation_prompt': '–Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –ù–ï —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –π–æ–≥–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É, —Å—Ñ–æ—Ä–º—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∞ –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –º–æ–≤—É, —è–∫–æ—é –±—É–ª–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –í–ò–ö–õ–Æ–ß–ù–û —Ç—ñ—î—é –º–æ–≤–æ—é, —è–∫–æ—é –±—É–ª–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.',
        'context_prompt': '–í—Ä–∞—Ö–æ–≤—É—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:',
        'question_prompt': '–ó–∞–ø–∏—Ç–∞–Ω–Ω—è:',
        'answer_prompt': '–í—ñ–¥–ø–æ–≤—ñ–¥—å:',
    }
}

def get_language():
    """Get the current language from environment variable or default from DEFAULT_INTERFACE_LANGUAGE."""
    default_lang = os.getenv('DEFAULT_INTERFACE_LANGUAGE').lower()
    return os.getenv('INTERFACE_LANGUAGE', default_lang).lower()

def set_language(lang_code):
    """Set the interface language."""
    if lang_code in TRANSLATIONS:
        os.environ['INTERFACE_LANGUAGE'] = lang_code
        return True
    return False

def t(key):
    """Translate a key to the current language."""
    lang = get_language()
    
    # Fallback to default language if language not found
    if lang not in TRANSLATIONS:
        lang = os.getenv('DEFAULT_INTERFACE_LANGUAGE', 'en').lower()
        # Final fallback to English if default is also invalid
        if lang not in TRANSLATIONS:
            lang = 'en'
    
    # Get translation or fallback to key if not found
    translation = TRANSLATIONS[lang].get(key, key)
    
    return translation

def get_language_names():
    """Get dictionary of language codes to display names."""
    return {
        'en': 'üá¨üáß English',
        'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'
    }